generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String   @id @default(cuid())
  name          String?  @unique
  email         String?  @unique
  phone         String?  @unique
  whatsapp      String?  @unique
  instagram     String?  @unique
  facebook      String?  @unique
  password      String?
  image         String?
  location      String?
  size          String?
  sexe          String?
  showPhone     Boolean?
  showWhatsapp  Boolean?
  useSameNumber Boolean?
  showInstagam  Boolean?
  showFacebook  Boolean?
  showEmail     Boolean?
  phoneVerified Boolean?
  emailVerified Boolean?

  accounts Account[]
  sessions Session[]
  posts    Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, email])
}

model Post {
  id          String  @id @default(cuid())
  title       String
  description String? @db.LongText()
  price       Int
  sexe        String
  size        String

  images   Images[]
  category Category[] @relation("CategoryRelationTable")
  brand    Brand[]    @relation("BrandRelationTable")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Images {
  id       String @id @default(cuid())
  imageUrl String @unique
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Brand {
  id   String @id @default(cuid())
  name String @unique
  Post Post[] @relation("BrandRelationTable")
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  Post Post[] @relation("CategoryRelationTable")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
